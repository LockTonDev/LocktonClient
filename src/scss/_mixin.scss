// scss-mixins : rem 
/*
  .usage {
    width: rem(212);          // → 13.25rem 반환 ( 213 / 16 = 13.25 )
  }
*/
@function rem($px) {
  @return calc($px / 16) * 1rem;
}


// scss-mixins : font 
/*
 .usage {
    @include font(size rem(17) weight 300 lh 1.45);
  }
*/
@mixin font($args) {
  $props: style weight variant size size-adjust stretch kerning line-height lh;

  @each $prop in $props {
    $prop-index: index($args, $prop);
    @if $prop-index {
      $value: nth($args, $prop-index + 1);
      @if $prop == 'line-height' or $prop == 'lh' {
        line-height: $value;
      } @else {
        font-#{$prop}: $value;
      }
    }
  }
}

// scss-mixins : indent
/*
 .usage {
    @include text-indent(14);
  }
*/
@mixin text-indent($font-size) {
  text-indent: -(getPx($font-size));

}

// scss-mixins : ellipsis 
/*
 .usage {
    @include text-ellipsis(em(520), true);
  }
*/
@mixin text-ellipsis($width: rem(4), $hover-visible: false) {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: unitless-px($width);
  
  // @if $hover-visible {
  //   &:hover {
  //     overflow: visible;
  //   }
  // }
}

//scss-mixins: margin, padding
/****************************************
* Padding, Margin 정의
* p는 padding, m은 margin을 나타냄.
* t는 상단 b는 하단 l은 왼쪽 r은 오른쪽의 방향
* ex :
* pt10 => padding-top:10px
* mb22 => margin-bottom: 22px
*****************************************/

/**
  px값 List를 만들어주는 함수입니다.
*/
@function size($start, $end) {
  $size : ();
  @for $i from $start through $end {
    $value : $i + 0;
      $size : append($size, $value);
  }
  @return $size;
}

/**
값이 0일때는 0으로, 그 외에는 'px'을 붙여줍니다.
ex) 0 => 0, 10 => 10px
*/
@function getPx($value) {
  @if $value == 0 {
    @return $value;
  } @else {
    @return $value + 0px;
  }
}

/**
값이 0일때는 0으로, 그 외에는 '%'을 붙여줍니다.
ex) 0 => 0, 10 => 10%
*/
@function getPercent($value) {
  @if $value == 0 {
    @return $value ;
  } @else {
    @return $value + 0%;
  }
}

/**
px 값입니다.
0 ~ 100px 까지 조정하게 만들었습니다.
*/
$size : size(0, 100);

/**
margin과 padding의 각 위치를 지정해주는 map 입니다.
key는 class이름 생성시 쓰이며 value는 상세 속성 정의시 쓰입니다.
*/
$position : ('l':'left', 'r':'right', 't':'top', 'b':'bottom');

/**
margin과 padding 생성을 위한 map입니다.
key는 class이름 생성시 쓰이며 value는 상세 속성 정의시 쓰입니다.
*/
$nameMap : ('m':'margin', 'p':'padding');

/**
margin과 padding 생성을 위한 map입니다.
key는 class이름 생성시 쓰이며 value는 상세 속성 정의시 쓰입니다.
*/
$volumeMap : ('w':'width', 'h':'height');
/**
실제 css class를 만들어주는 mixin입니다.
nameMap, position, size를 혼합하여 아래와 같은 형식으로 만들어줍니다.

ex>
m-0 : { margin : 0; }
mt-1 : { margin-top : 1px; }
pb-22 : {padding-bottom:22px}
*/
@mixin generate($nameMap : (), $position : (), $size : ()) {
  @each $preKey, $preValue in $nameMap {
    @each $px in $size {
      .#{$preKey}#{$px} {
        #{$preValue} : getPx($px);
       }
       @each $sufKey, $sufValue in $position {
         .#{$preKey}#{$sufKey}#{$px} {
            #{$preValue}-#{$sufValue} : getPx($px);
          }
       }
    }
  }
}

@mixin generate2($volumeMap : (),$size : ()) {
  @each $preKey, $preValue in $volumeMap {
    @each $px in $size {
      .#{$preKey}#{$px} {
        #{$preValue} : getPercent($px);
       }
    }
  }
}

@include generate($nameMap, $position, $size);
@include generate2($volumeMap, $size);